package symboltable;import syntaxtree.IdentifierType;import syntaxtree.Type;import java.util.HashMap;import java.util.Map;public class RamClass{    private String id;    private Map<String, RamMethod> methods;    private Map<String, RamVariable> globals;    private Type type;    public RamClass(String id)    {        this.id = id;        type = new IdentifierType(id);        methods = new HashMap<String, RamMethod>();        globals = new HashMap<String, RamVariable>();    }    public RamClass()    {}    public String getId()    {        return id;    }    public Type type()    {        return type;    }    public boolean addMethod(String id, Type type)    {        if (containsMethod(id))        {            return false;        }        else        {            methods.put(id, new RamMethod(id, type));            return true;        }    }    public Iterable<String> getMethods()    {        return methods.keySet();    }    public RamMethod getMethod(String id)    {        if (containsMethod(id))        {            return methods.get(id);        }        else        {            return null;        }    }    public int numMethods()    {        return methods.size();    }    public boolean addVar(String id, Type type)    {        if (globals.containsKey(id))        {            return false;        }        else        {            globals.put(id, new RamVariable(id, type));            return true;        }    }    public RamVariable getVar(String id)    {        if (containsVar(id))        {            return globals.get(id);        }        else        {            return null;        }    }    public boolean containsVar(String id)    {        return globals.containsKey(id);    }    public boolean containsMethod(String id)    {        return methods.containsKey(id);    }        public int getVarCount()    {        return globals.size();    }        @Override    public String toString()    {        String result = "\t" + id + "\n\t\tFields:\n";                        for(RamVariable global : globals.values())        {            result += "\t\t\t" + global.toString() + "\n";        }                result += "\t\tMethods:\n";                for(RamMethod method : methods.values())        {            result += method.toString();        }                return result;    }}