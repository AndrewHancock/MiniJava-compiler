package frontend;import visitor.*;import syntaxtree.Program;import frontend.generated.*;public class MainSemanticAnalyzer {    public static void main(String [] args) {        Program root;        try {            // from standard input            if (args.length == 0)                root = new frontend.generated.RamParser(System.in).Goal();            else {                java.io.InputStream is = new java.io.FileInputStream(new java.io.File(args[0]));                root = new frontend.generated.RamParser(is).Goal();            }            System.out.println("Parsing successful!");                        System.out.println();            // prints original source program (white spacing is guessed)            root.accept(new PrettyPrintVisitor());                          System.out.println();            // prints AST            root.accept(new ASTPrintVisitor());                        System.out.println();            // build symbol table            BuildSymbolTableVisitor v1 = new BuildSymbolTableVisitor();            root.accept(v1);                        System.out.println();            // prints symbol table            System.out.println(v1.getSymTab());                        System.out.println();            // perform type checking            root.accept(new TypeCheckVisitor(v1.getSymTab()));                       }        catch (ParseException e) {            System.out.println(e.toString());        }        catch (java.io.FileNotFoundException e) {            System.out.println("File Not Found: "+ e);        }         }}