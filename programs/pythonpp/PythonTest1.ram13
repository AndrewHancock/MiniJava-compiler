//Test code for grammar.
class PythonTest1
{
	public static void main(String[] args)
	{
		//Will print the testCount after all tests are run
		print(new RegressionTester().runTests())!
	}
}

/* This class will perfom some tests on constructs I had to modify/add in the grammar.
 */
class RegressionTester
{
	public int runTests()
	{
		int testCount!
		int total!
		testCount = 0!
		total = 0!
		
		//Test exp list for print and print ln
		print(1, 2, 3)!
		println(1, 2, 3)!
		

		// For each test that passes, a 1 will be printed
		// For each failure, a 0
		println(this.plusEquals())!
		testCount = testCount + 1!
		println(this.forEach())!
		testCount = testCount + 1!
		println(this.whileTest())!
		testCount = testCount + 1!
		println(this.testMulipleCall())!
		testCount = testCount + 1!
		
		return testCount!
	}
	
	//Return 1 if the test "passed", -1 if it failed
	public int plusEquals()
	{
		int i!
		int result!
		i = 1!
		i += 5!
		
		if(i eq 6)
			result = 1!
		else
			result = 0!
			
		return result!
	}
	
	public int forEach()
	{
		int j!
		int result!
		int[] array!
		array = new int[3]!
		array[0] = 1!
		array[1] = 2!
		array[2] = 3!
		
		foreach(int value : array)
			j += value!
			
		if(j eq 6)
			result = 1!
		else
			result = 0!
		
		return result!
	}
	
	public int whileTest()
	{
		int i!
		int result!
		i = 0!
		
		while(i lt 10)
		{
			i = i + 1!
		}
		
		if(i eq 10)
			result = 1!
		else
			result = 0!
			
		return result!
	}
	
	/* This tests the failure case that Quinn found with chaining function calls.
	*/
	public int testMulipleCall()
	{
		return new MethodTest().getThis().getThis().getThis().get1()!
	}
}

class MethodTest
{
	public MethodTest getThis()
	{
		return this!
	}
	
	public int get1()
	{
		return 1!
	}
}